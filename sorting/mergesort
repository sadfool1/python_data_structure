"""
==============================================================================================================================
Intro
Merge sort orders a list of values by recursively dividing the list in half until each sub-list has one element recombine.
We will use merge sort without using the inbuilt python merge sort and assume that the elements are all integers
So for the code we have two functions, first your main mergesort(your_list) function that separates the list into two lists, 
Second function merge(tempA, tempB) that reads the first element and compre them.

HOWEVER This code is wrong. As explained below -- refer to line 99 for the write code.

This is because my first attempt, the sorting method is not merge sort. 

==============================================================================================================================
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Apr 11 17:14:28 2019

@author: jameselijah
"""
import math 

mylist = [3, 4, 2, 1, 9, 8, 10, 2] #test list
tempC =[]

def mergesort(list_sorting):
    if len(list_sorting) == 0:
        print ( list_sorting , "list is empty")
    elif len(list_sorting) == 1:
        print( list_sorting )
    else:
        n = math.ceil(len(list_sorting)/2)
        tempA = [i for i in list_sorting[0:n]] #divide
        tempB = [i for i in list_sorting[n:]]  #divide
        for i in range(1, len(tempA)):  
            temp = tempA[i]
            j = i-1 #iteration before i
            while j >= 0 and temp < tempA[j]: #satisfy both condition
                tempA[j+1] = tempA[j] #
                j -=1 #decrease j counter as we go up the list
            tempA[j+1] = temp
        
        for i in range(1, len(tempB)):
            temp = tempB[i]
            j = i-1 #iteration before i
            while j >= 0 and temp < tempB[j]: #satisfy both condition
                tempB[j+1] = tempB[j] #
                j -=1 #decrease j counter as we go up the list
            tempB[j+1] = temp

        merge(tempA,tempB)

def merge(tempA,tempB):
    indexA = 0
    indexB = 0
    tempC = []
    while (indexA < len(tempA)) or (indexB < len(tempB)):
        if indexA >= len(tempA):
            tempC.append(tempB[indexB])
            indexB +=1
        elif indexB >= len(tempB):
            tempC.append(tempA[indexA])
            indexA +=1
        elif tempA[indexA] > tempB[indexB]:
            tempC.append(tempB[indexB])
            indexB +=1
        else:
            tempC.append(tempA[indexA])
            indexA +=1

    
    print(tempC)

mergesort(mylist)


#Your result should be [1, 2, 2, 3, 4, 8, 9, 10]







"""
==============================================================================================================================

I re-read my notes and found out that my above method is wrong, not the actually the real MergeSort. Below is a piece of code derived from the following

In referrence to B. Miller, D. Ranum. (2014). Created using Runestone 2.7.10. Retrieved from https://interactivepython.org/runestone/static/pythonds/SortSearch/TheMergeSort.html

As submitted to PROF, comments " 2) Insertion node is wrong"

==============================================================================================================================
"""





def mergeSort(mylist):
    if len(mylist)>1:
        n = len(mylist)//2
        tempA = mylist[:n]
        tempB = mylist[n:]
        indexA=0
        indexB=0
        k=0
        
        mergeSort(tempA)
        mergeSort(tempB)

        while indexA < len(tempA) and indexB < len(tempB):
            if tempA[indexA] < tempB[indexB]:
                mylist[k]=tempA[indexA]
                indexA=indexA+1
            else:
                mylist[k]=tempB[indexB]
                indexB=indexB+1
            k=k+1

        while indexA < len(tempA):
            mylist[k]=tempA[indexA]
            indexA=indexA+1
            k=k+1

        while indexB < len(tempB):
            mylist[k]=tempB[indexB]
            indexB=indexB+1
            k=k+1
    elif len(mylist)== 1:
        return mylist
    else:
        print('List empty')
    

mylist = [3,4,2,1,9,8,10,2]
mergeSort(mylist)
print(mylist)


"""
==================================================================================================================
Solution key given by PROF. [to be tested running time]
==================================================================================================================
"""


def merge(list1,list2):
    list3 = [] 
    index1 = 0
    index2 = 0
    while ( index1 < len(list1) and index2 < len(list2) ):
        if (list1[index1] <= list2[index2]): 
            list3.append(list1[index1])
            index1 = index1 + 1
        else: 
            list3.append(list2[index2])
            index2 = index2 + 1
    if index1 < len(list1) : 
        for i in range (index1, len(list1), 1):
            list3.append(list1[i]) 
    if index2 < len(list2) : 
        for i in range (index2, len(list2), 1):
            list3.append(list2[i])
    return list3 

            
# function merge sort       
def mergeSort_final(mylist):     
    if (len(mylist) < 2):    
        return mylist 
    middle = int(len(mylist)/2)  # alternatively, middle = len(mylist) // 2 
    list1 = mergeSort_final(mylist[0:middle]) #apply mergeSort to the left half 
    list2 = mergeSort_final(mylist[middle:]) #apply mergeSort to the right half 
    list3 = merge(list1, list2)
    return list3 


list1 = [3, 4, 2, 1, 9, 8, 10, 2]
list2 = mergeSort_final(list1)
print(list2)   

