#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Apr 10 19:08:35 2019
@author: jameselijah

simple sorting algorithm, calculated computaitonal power worst case at O(n2)
"""
myList = [3,4,2,1,9,8,10,2]
def insertionSort(myList):
    for i in range(1, len(myList)):
        temp = myList[i]
        j = i-1 #iteration before i
        while j >= 0 and temp < myList[j]: #satisfy both condition
            myList[j+1] = myList[j] #
            j -=1 #decrease j counter as we go up the list
        myList[j+1] = temp
            
insertionSort(myList)
print (myList)

"""
==================================================================================================================
Solution key given by PROF. [to be tested running time]
==================================================================================================================
"""

def insertionSort(mylist):
    if len(mylist) == 0:
        return mylist                                          
    for i in range(1, len(mylist), 1):  # starting from the second element
        # insert element mylist[i] into the sorted sublist mylist[0] mylist[1] ... mylist[i-1] 
        currentvalue = mylist[i]
        j = i - 1  
        while mylist[j] > currentvalue and j >= 0:
            mylist[j+1] = mylist[j] 
            j = j - 1
            
        mylist[j+1] = currentvalue  
    return mylist


list1 = [3, 4, 2, 1, 9, 8, 10, 2]
list2 = insertionSort(list1)
print(list2)


