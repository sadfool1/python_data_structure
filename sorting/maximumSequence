'''
The divide-and-conquer algorithm on the maximum subsequence problem works as follows:
1. Locate the middle element of the sequence. It divides the sequences into three parts: the left half, the right half, and the middle element.
2. Find the sum of the maximum subsequence for the left half (in a recursive way)
3. Find the sum of the maximum subsequence for the right half (in a recursive way)
4. Find the sum of the maximum sequence that contains the middle element (how to solve this problem in an efficient way?)
5. Return the maximum of the above three sums.
'''

'''
Credits to:

The following code is contributed by Nikita Tiwari.
It is available at the following webpage: 
https://www.geeksforgeeks.org/maximum-subarray-sum-using-divide-and-conquer-algorithm/ 

''' 

# A Divide and Conquer based program 
# for maximum subarray sum problem 

# Find the maximum possible sum in 
# arr[] auch that arr[m] is part of it 
def maxCrossingSum(arr, l, m, h) : 
	
	# Include elements on left of mid. 
	sm = 0; left_sum = -10000000
	
	for i in range(m, l-1, -1) : 
		sm = sm + arr[i] 
		
		if (sm > left_sum) : 
			left_sum = sm 
	
	
	# Include elements on right of mid 
	sm = 0; right_sum = -1000
	for i in range(m + 1, h + 1) : 
		sm = sm + arr[i] 
		
		if (sm > right_sum) : 
			right_sum = sm 
	

	# Return sum of elements on left and right of mid 
	return left_sum + right_sum; 


# Returns sum of maxium sum subarray in aa[l..h] 
def maxSubArraySum(arr, l, h) : 
	
	# Base Case: Only one element 
	if (l == h) : 
		return arr[l] 

	# Find middle point 
	m = (l + h) // 2

	# Return maximum of following three possible cases 
	# a) Maximum subarray sum in left half 
	# b) Maximum subarray sum in right half 
	# c) Maximum subarray sum such that the 
	#	 subarray crosses the midpoint 
	return max(maxSubArraySum(arr, l, m), 
			maxSubArraySum(arr, m+1, h), 
			maxCrossingSum(arr, l, m, h)) 
			

# Driver Code 
# arr = [2, 3, 4, 5, 7] 
arr = [4,-3,5,-2,-1,2,6,-2]
n = len(arr) 

max_sum = maxSubArraySum(arr, 0, n-1) 
print("Maximum contiguous sum is ", max_sum) 



